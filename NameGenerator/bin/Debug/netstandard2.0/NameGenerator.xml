<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NameGenerator</name>
    </assembly>
    <members>
        <member name="T:NameGenerator.GeneratorBase">
            <summary>
            An abstract class that serves as the base for all generators.
            </summary>
        </member>
        <member name="F:NameGenerator.GeneratorBase.random">
            <summary>
            An instance of the Random class used to randomize the generation.
            </summary>
        </member>
        <member name="M:NameGenerator.GeneratorBase.Generate">
            <summary>
            The method for generating names or gamertags.
            </summary>
            <returns>A string containing the generated name.</returns>
        </member>
        <member name="P:NameGenerator.GeneratorBase.GeneratorFlags">
            <summary>
            An enum property that defines the generator flags, which perform additional operations on the string once it has been generated.
            By default there are no generator flags.
            </summary>
            <remarks>
            Possible generator flags could be Numbers or Hashtag.
            </remarks>
            <example>
            <code>
            Generator MyGenerator = new Generator();
            MyGenerator.GeneratorFlags |= NameTypes.Number;
            MyGenerator.Generate();
            </code>
            </example>
        </member>
        <member name="P:NameGenerator.GeneratorBase.SpaceCharacter">
            <summary>
            A string property that defines what character to be used in place of a space.
            By default, the space character is a space.
            </summary>
            <remarks>
            Possible space characters could be an underscore, a dash, a space, nothing at all, etc.
            </remarks>
            <example>
            <code>
            Generator MyGenerator = new Generator();
            MyGenerator.SpaceCharacter = "_"
            MyGenerator.Generate();
            </code>
            </example>
        </member>
        <member name="T:NameGenerator.GeneratorBase.NameTypes">
            <summary>
            Enum containing all the different generator flags.
            </summary>
        </member>
        <member name="F:NameGenerator.GeneratorBase.NameTypes.None">
            <summary>
            No Flags, just plain and simple name generation.
            </summary>
        </member>
        <member name="F:NameGenerator.GeneratorBase.NameTypes.Numbers">
            <summary>
            A number between 0 and 999 will be appended to the name.
            </summary>
        </member>
        <member name="F:NameGenerator.GeneratorBase.NameTypes.Hashtag">
            <summary>
            A hashtag will come before the name.
            </summary>
        </member>
        <member name="T:NameGenerator.Generators.GamerTagGenerator">
            <summary>
            A class for the generation of gamer tags.
            </summary>
            <remarks>Derives from the GeneratorBase abstract class.</remarks>
        </member>
        <member name="M:NameGenerator.Generators.GamerTagGenerator.#ctor">
            <summary>
            The constructor for the GamerTagGenerator class.
            Sets the default space character to an underscore.
            </summary>
        </member>
        <member name="M:NameGenerator.Generators.GamerTagGenerator.Generate">
            <summary>
            This method generates a gamertag.
            It will perform additional operations depending on what generator flags have been set.
            </summary>
            <returns>A string containing a gamertag</returns>
        </member>
        <member name="T:NameGenerator.Generators.RealNameGenerator">
            <summary>
            A class for the generation of human names.
            </summary>
            <remarks>Derives from the GeneratorBase abstract class.</remarks>
        </member>
        <member name="M:NameGenerator.Generators.RealNameGenerator.Generate">
            <summary>
            This method generates a human name.
            It will perform additional operations depending on what generator flags have been set.
            </summary>
            <returns>A string containing a human name</returns>
        </member>
    </members>
</doc>
